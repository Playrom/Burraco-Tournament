{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1040{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 6.3.9600}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang16 Il progetto "Burraco Tournament" punta ad aiutare l'utente nella creazione e gestione di un torneo del gioco di carte chiamato "Burraco".\line Il Progetto si avvale delle classi SWING per creare un interfaccia grafica utile per semplificare ulteriormente l'utilizzo.\line\line Sono presenti tre packages,uno dedicato alle classi base del algoritmo, uno alle Eccezioni,e infine uno per raccogliere le classi della GUI.\par
Alla base del programma troviamo due classi principali, la classe SINGLE e la COPPIA, grazie alle quali sono organizzati i concetti di giocatore,e quello di coppia di due giocatori, che prendono parte alla partita.\line Nella classe SINGLE sono presenti dei campi quale:nome,punteggi vari,un boolean che indica se il giocatore gioca da solo o \'e8 in coppia, e degli id, uno interno al torneo in corso, e uno stante a indicare l'id generale di riscontro su un database MYSQL\par
Nella classe COPPIA vengono associati due istanze di classe SINGLE grazie agli id interni al torneo, oltre ai punteggi. inoltre viene inserito un riferimento a un ArrayList contenente tutti i giocatori del torneo per aiutare nel TOSTRING della coppia.\par
Entrambe le classi implementano l'interfaccia COMPARABLE che permette di poter ordinare correttamente tutte le coppie, o single, contenuti in una lista,invocando il metodo SORT presente in LIST\par
Tutti gli array contenti invocazioni di classe SINGLE sono di tipo SINGLELIST, una estensione della classe ARRAYLIST , creata per poter implementare un metodo "findSingle(int id)" che ritorna un oggetto di tipo SINGLE contenuto in quella lista con id specificato.\par
\line Un altra classe fondamentale per il funzionamento del programma \'e8 la classe TAVOLO.\line In un tavolo durante una partita di burraco sono sedute due coppie, oppure quattro giocatori singoli. Il comportamento di questa classe rispecchia questa situazione.\line Infatti la classe TAVOLO \'e8 una classe base dal quale vengono estese due classi ulteriori, TAVOLOCOPPIE e TAVOLOSINGOLI,a seconda di quale \'e8 la tipologia del torneo, se a coppie o ognuno per se.\par
Di base la classe TAVOLO presenta 4 int di tipo protetto, che identificano l'id del tavolo,il numero di "smazzate" da effetture,e i punteggi per ogni coppia.\line Inoltre implemementa l'interfaccia TABLES, ove sono presenti due metodi, assegnapunteggi, e annullapunteggi. La classe TAVOLO \'e8 astratta infatti non pu\'f2 essere istanziata ,inoltre vengono inseriti due metodi TOSTRING astratti riferiti alla coppia1 e alla coppia2\par
La classe TAVOLOCOPPIE presenta a parte i costruttori anche un metodo findCoppia utile per trovare una data coppia inserita nelle liste contenti le coppie presenti in questa classe, inoltre vengono implementati tutte le classi astratte.\line Ugualemente viene implementata la classe TAVOLOSINGOLI,dove per\'f2 avviene un override del metodo EQUALS per verificare se due tavoli contengono gli steggi giocatori.\par
Il torneo \'e8 diviso in turni, che vengono implementati con la classe TURNO\line In essa \'e8 presente un Array con tutti i TAVOLO del turno, inoltre sono presenti diversi ArrayList con le coppie e i singoli. Ulteriormente abbiamo la presenza di degli oggetti di tipo URNA, che servono per "estrarre" in modo random i partecipanti. Infine ci sono degli int per indicare l'id del turno, numero smazzate e il numero di tavoli.\line Sono presenti diversi costruttori. Di base se nel costruttore viene passato un Array con i tavoli il compito del costruttore sar\'e0 solo quello di associare le variabili. Altrimenti si occupa anche di invocare dei metodi per poter creare tutti i tavoli di quel turno.\par
L'ultima classe base nel package DEFAULTS \'e8 quella TORNEO. Come suggerisci il nome questa classe racchiude istanze di tutti i tipi precedenti, gerarchicamente , e serve a operare in modo totale su ogni aspetto del torneo. Avviarlo, concluderlo, modificare variabili, ecc...\par
La classe MAINCLASS serve a fare da collegamento tra gli algoritmi contenuti in TORNEO, e l'interfaccia grafica,infatti nel MAIN della gui verr\'e0 istanziato uno oggetto di tipo MAINCLASS.\par
Particolare \'e8 la classe CREATIONTABLES, che \'e8 utile alla creazione dei tavoli per ogni turno. Similmente alla classe TAVOLO, questa classe \'e8 di tipo astratto, e viene estesa da CREATIONTABLESCOPPIE e CREATIONTABLESSINGLES a seconda di quale sia il tipo di torneo in corso.\par
A chiudere il package DEFAULTS troviamo la classe CONNECTDATABASE, che permette il dump e l'update del database remoto, dove vengono inseriti i risultati per ogni torneo per ogni giocatore, e dal quale durante l'atto di creazione del torneo l'utente pu\'f2 estrapolare i dati di un giocatore che abbia gi\'e0 partecipato a un torneo precedente.\par
Le classi XMLWRITER e XMLPARSER servono a salvare e caricare un file xml all'interno del quale vengono inseriti tutti i dati di un torneo, per poter essere recuperati in un momento successivo. Allegato si trova il DTD.\par
\par
Il package EXCEPTION contiene tre eccezioni che possono essere chiamate da alcuni metodi all'interno della classe defaults, due per controllare se un oggetto \'e8 di tipo COPPIA o SINGLE,e uno per indicare se un turno \'e8 gi\'e0 stato "calcolato" e concluso durante lo svolgimento del torneo\line\line il terzo \'e8 ultimo package da considerare \'e8 quello GUI, voe sono presenti tutti gli elementi che compongono l'interfaccia grafica.\line La classe principale \'e8 MAINGUI , che essendo la classe base estende JFrame.\line Al suo interno troviamo diversi oggetti che estendono la classe JPANEL e JDIALOG, un istanza di tipo MAINCLASS, e gli oggetti utili alla creazione del JMENU.\par
Le classi che estendono JPANEL, ovvero StartedPanel e NotStartedPanel, contengono dei JButton e dei JLabel, e inoltre presentano dei listener per alcune operazioni effettuate in dei JDialog istanziati dalla pressione di alcuni bottoni presenti in questi pannelli\par
Questi JDialog sono:\line DIALOG ADD\line DIALOG EDIT\line COUPLE DIALOG LIST\line\line DIALOG ADD permette l'interazione con l'aggiunta di giocatori, o coppie al torneo, infatti da esso vengono estese le due classi Couple Dialog Add, e Single Dialog Add.\line In dialog add vengono istanziati tutti i bottoni e label , e vengono inseriti nel layout. Nelle due estensioni vengono inseriti i testi dei bottoni e delle lable, e solo in Single Dialog Add, vengono rimossi quelli non necessari.\line Ognuna delle due classi ha un ovverride per quanto riguarda il comportamento dei bottoni, poich\'e8 a seconda se il torneo sia di singoli, o a coppie devono essere chiamati metodi e classi differenti.\line In questi due JDialog sono presenti due bottoni per poter istanziare un JDialog di tipo DIALOG FROM DATABASE, che utilizzando la classe CONNECT DATABASE del package defaults, genera una tabella dove vengono elencati tutti i giocatori presenti nel database remoto, con una media punteggio. Cliccando due volte su un nome viene chiuso questo Dialogo e nei campi dell'aggiunta giocatore sottostanti vengono inseriti i dati di quel giocatore remoto,inserendo pure l'id di riferimento sul database.\par
DIALOG EDIT si comporta in modo simile, ma ser per editare le coppie.\par
COUPLE DIALOG LIST serve a mostrare le coppie e i singoli gi\'e0 inseriti nel torneo.\par
INFO DIALOG EDIT viene instanziato alla pressione del bottone utile alla creazione da zero di un torneo, ed \'e8 utile per inserire le configurazioni iniziali, quali tipologia di torneo, numero di turni ecc..\par
\line Nel database remoto sono presenti tre tabelle:\line TORNEI - ID, NOME\line GIOCATORI - ID,NOME\line PUNTEGGI - ID_torneo , ID_giocatore, PUNTEGGIO\par
Nelle query di CONNECT DATABASE :\line <<select *,SUM(punti) as somma , COUNT(*) as numero_partite from punteggi  left outer join giocatori on giocatori.id=punteggi.id_giocatore group by punteggi.id_giocatore;>>\line Possiamo notare un left outer join che mette in relazione la tabella giocatori, ottenendo cosi il nome di un giocatore associato a un id nella tabella punteggi, e avviene una somma di tutti i punteggi  e un conteggio del numero di record nella table punteggi per ogni giocatore.\par
\par
}
 